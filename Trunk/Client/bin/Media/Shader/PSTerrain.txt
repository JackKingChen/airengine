#include "VertexDef.txt"
sampler SampRGB;
sampler Samp0;    //A
sampler Samp1;    //R
sampler Samp2;    //G
sampler Samp3;    //B

#include "PSLightPrePass.txt"
#include "Fog.txt"

float2 uvScales0;
float2 uvScales1;
float2 uvScales2;
float2 uvScales3;

float4 ambientColor;
float2 halfPixel;
float3 ks;
float3 kd;
float3 ka;
float3 cameraPos;

struct PS_OUTPUT
{
    float4 Color : COLOR0;
};

#ifdef SHADOWMAP
float4 CascadeFars;
#include "PSShadowmapInclude.txt"

  #ifdef LIGHT_PRE_PASS
    #define PS_INPUT PS_TerrainLPPWithShadowInput 
  #else
    #ifdef CSM
      #define PS_INPUT PS_TerrainAcceptCSMInput
    #else
      #define PS_INPUT PS_TerrainAcceptShadowInput 
    #endif
  #endif
#elif defined(LIGHT_PRE_PASS)
    #define PS_INPUT PS_TerrainLPPInput 
#else
    #define PS_INPUT PS_TerrainInput 
#endif


float4 CalculateTerrainColor(float2 uvCoords, float3 fPos)
{
    float4 rgbTex = tex2D(SampRGB, uvCoords);
    float4 colorSurface = tex2D(Samp0, uvCoords * uvScales0);
    float4 colorSamp1 = tex2D(Samp1, uvCoords * uvScales1);
    float4 colorSamp2 = tex2D(Samp2, uvCoords * uvScales2);
    float4 colorSamp3 = tex2D(Samp3, uvCoords * uvScales3);

    float4 colorLevel = colorSurface * rgbTex.a + colorSamp1 * rgbTex.r + colorSamp2 * rgbTex.g + colorSamp3 * rgbTex.b;    

    return colorLevel;
}

float2 postProjToScreen(float4 position) 
{     
    float2 screenPos = position.xy / position.w;     
    return (0.5f * (float2(screenPos.x, -screenPos.y) + 1)); 
}   

#ifdef SHADOWMAP
PS_OUTPUT PSMain(PS_INPUT input, float2 vPos : VPOS)
{
    PS_OUTPUT output = (PS_OUTPUT)0;

    output.Color = CalculateTerrainColor(input.texCoords, input.posWorld);

    float3 zrgb = float3(0.0, 0.0, 1.0);
#ifdef CSM
    float shadow = CaculateCascadeShadowmap16(vPos, input.posInLight, ambientColor, input.offset.xy);
    if (input.offset.z < CascadeFars.x)
    {
        zrgb = float3(1.0, 0.0, 0.0);
    }
#else
    float shadow = CaculateShadow16(vPos, input.posInLight, ambientColor);
#endif

#ifdef LIGHT_PRE_PASS
    float2 scrCoord = postProjToScreen(input.posProj) - halfPixel;   
    float4 light = CaculateLight(scrCoord); //tex2D(SamplerLight, scrCoord);   

    output.Color.rgb = saturate((ka * ambientColor.rgb + kd * light.rgb + ks * light.aaa) * output.Color.rgb) * shadow;
#else
    output.Color *= input.color * float4(shadow, shadow, shadow, 1);
#endif
    output.Color.rgb = LerpColorWithFog(output.Color.rgb, cameraPos, input.posWorld); // * zrgb;

    return output;
}
#else
PS_OUTPUT PSMain(PS_INPUT input)
{
    PS_OUTPUT output = (PS_OUTPUT)0;

    output.Color = CalculateTerrainColor(input.texCoords, input.posWorld);

    output.Color *= input.color;
#ifdef LIGHT_PRE_PASS
    float2 scrCoord = postProjToScreen(input.posProj) - halfPixel;   //uv坐标是要+0.5像素，halfPixel是(-0.5/nWidth, -0.5/nHeight)
    float4 light = tex2D(SamplerLight, scrCoord);   

    output.Color.rgb = saturate((ka * ambientColor.rgb + kd * light.rgb + ks * light.aaa) * output.Color.rgb);
#endif
    output.Color.rgb = LerpColorWithFog(output.Color.rgb, cameraPos, input.posWorld); // * zrgb;
    return output;
}
#endif
