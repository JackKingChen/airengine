#include "VertexDef.hlsl5"
#include "clipplane.hlsl5"

struct VS_INPUT
{
    float3 position : POSITION;
    float3 normal: NORMAL;
    float4 color : COLOR;
    float2 uvCoords : TEXCOORD;
};

struct VS_OUTPUT
{
    float4 position : SV_POSITION;
    //float3 normal : TEXCOORD0;
    float4 color : COLOR0;
    float2 texCoords : TEXCOORD0;
    float3 posWorld : TEXCOORD1;
    float4 posInLight : TEXCOORD2;   //顶点在以light为摄像机的投影空间的位置
    float clip : SV_ClipDistance0;
};

cbuffer cbTerrain
{
    matrix wvpMatrix;
    matrix worldMatrix;
    matrix WorldViewMatrix;

    float4 CascadeFars;
    matrix LightSpaceViewProjMatrix;
    //matrix LightSpaceProjMatrix;  //在以灯光为视点的投影空间
    float4x4 matViewToLightProj;  // Transform from view space to light projection space

    float3  sunLight;
    float3  cameraPos;
    float4  ambientColor;
    float4  sunColor;    //太阳光颜色
    float   shininess;
    float3 ka;
    float3 kd;
    float3 ks;
};


interface iTerrainVS
{
    VS_OUTPUT GetTerrainVS(VS_INPUT input);
};

class TerrainAcceptShadowmapVS : iTerrainVS
{
    float a;
    VS_OUTPUT GetTerrainVS(VS_INPUT input)
    {
        VS_OUTPUT output = (VS_OUTPUT)0;
	
        output.position = mul(float4(input.position, 1.0), wvpMatrix);
        
        output.texCoords = input.uvCoords;
        
        output.color = input.color;
        output.posWorld = input.position.xyz;


        output.posInLight = mul(float4(input.position, 1.0), LightSpaceViewProjMatrix);//LightSpaceProjMatrix);

        float3 ambient = ka * ambientColor.rgb;

        // Compute the diffuse term
        float3 N = input.normal;
        
        float diffuseLight = max(dot(sunLight, N), 0);
        float3 diffuse = kd * sunColor.rgb * diffuseLight;
        //diffuse = clamp(diffuse, ambient, float3(1.0, 1.0, 1.0));

        float3 V = normalize(cameraPos - input.position.xyz);     //眼睛到点的向量
        float3 H = normalize(sunLight + V);               //用了blinn模型计算光照
        float specularLight = pow(max(dot(H, N), 0), shininess);

        float3 specular = ks * ambientColor.rgb * specularLight;

        output.color.rgb = saturate(ambient + diffuse + specular);
        output.color.a = 1.0;

        output.clip = 1.0;
        if (nClipEnable > 0)
        {
            output.clip = CaculateClipPlane(float4(input.position.xyz, 1.0), worldMatrix);
        }
        return output;
    }
};

class TerrainNormalVS : iTerrainVS
{
    float a;
    VS_OUTPUT GetTerrainVS(VS_INPUT input)
    {
        VS_OUTPUT output = (VS_OUTPUT)0;
	
        output.position = mul(float4(input.position, 1.0), wvpMatrix);
        
        output.texCoords = input.uvCoords;
        
        output.color = input.color;
        output.posWorld = input.position.xyz;

        float3 ambient = ka * ambientColor.rgb;

        // Compute the diffuse term
        float3 N = input.normal;
        
        float diffuseLight = max(dot(sunLight, N), 0);
        float3 diffuse = kd * sunColor.rgb * diffuseLight;
        //diffuse = clamp(diffuse, ambient, float3(1.0, 1.0, 1.0));

        float3 V = normalize(cameraPos - input.position.xyz);     //眼睛到点的向量
        float3 H = normalize(sunLight + V);               //用了blinn模型计算光照
        float specularLight = pow(max(dot(H, N), 0), shininess);

        float3 specular = ks * ambientColor.rgb * specularLight;

        output.color.rgb = saturate(ambient + diffuse + specular);
        output.color.a = 1.0;

        output.clip = 1.0;
        if (nClipEnable > 0)
        {
            output.clip = CaculateClipPlane(float4(input.position.xyz, 1.0), worldMatrix);
        }
        return output;
    }
};

class TerrainDeferredShadingNoShadowVS : iTerrainVS
{
    float a;
    VS_OUTPUT GetTerrainVS(VS_INPUT input)
    {
        VS_OUTPUT output = (VS_OUTPUT)0;
	
        output.position = mul(float4(input.position, 1.0), wvpMatrix);
        
        output.texCoords = input.uvCoords;
        
        output.color = input.color;
        output.posWorld = input.position.xyz;

        float3 ambient = ka * ambientColor.rgb;

        // Compute the diffuse term
        float3 N = input.normal;
        
        float diffuseLight = max(dot(sunLight, N), 0);
        float3 diffuse = kd * sunColor.rgb * diffuseLight;
        //diffuse = clamp(diffuse, ambient, float3(1.0, 1.0, 1.0));

        float3 V = normalize(cameraPos - input.position.xyz);     //眼睛到点的向量
        float3 H = normalize(sunLight + V);               //用了blinn模型计算光照
        float specularLight = pow(max(dot(H, N), 0), shininess);

        float3 specular = ks * ambientColor.rgb * specularLight;

        output.color.rgb = saturate(ambient + diffuse + specular);
        output.color.a = 1.0;

        output.clip = 1.0;
        if (nClipEnable > 0)
        {
            output.clip = CaculateClipPlane(float4(input.position.xyz, 1.0), worldMatrix);
        }
        return output;
    }
};

cbuffer cbTerrainClass
{
    TerrainNormalVS g_TerrainNormal;
    TerrainAcceptShadowmapVS g_TerrainAcceptShadowmap;
    TerrainDeferredShadingNoShadowVS g_TerrainDeferredShadingNoShadow;
};

iTerrainVS g_TerrainVS;

VS_OUTPUT VSMain(VS_INPUT input)
{
    return g_TerrainVS.GetTerrainVS(input);
}

