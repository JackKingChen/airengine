Texture2D texColor;
SamplerState samplerColor;   

Texture2D texScene;
SamplerState samplerScene; 

struct VS_INPUT
{
    float4 position     : POSITION;
    float4 color        : COLOR;
    float2 uvCoords     : TEXCOORD;
};

struct VS_OUTPUT
{
   float4  pos          : SV_POSITION;
   float2  texCoord     : TEXCOORD;
};

#define PS_INPUT VS_OUTPUT

struct PS_OUTPUT
{
    float4 color : COLOR;
};

cbuffer cbPerObject
{
    matrix projectionMatrix;
};

cbuffer cbBlur
{
    float bloomScale = 1.2f;
    //改为循环7次 以提高效率
	static const int g_cKernelSize = 7;

	float2 TexelKernel[g_cKernelSize];

	float BlurWeights[g_cKernelSize];
};

cbuffer cbBrightPass
{
	float luminance = 0.08;
	static const float fMiddleGray = 0.18;
	static const float fWhiteCutoff = 0.8f;
};
 
VS_OUTPUT VSMain(VS_INPUT input)
{
   VS_OUTPUT ouput = (VS_OUTPUT)0;
 
   //input.position.xy = sign( input.position.xy );
   //ouput.pos = float4( input.position.xy, 0.0f, 1.0f );
   ouput.pos = mul(float4( input.position.xyz, 1.0f ), projectionMatrix);
 
   // get into range [0,1]
   ouput.texCoord = input.uvCoords; //(float2(ouput.pos.x, -ouput.pos.y) + 1.0f)/2.0f;
   
   return ouput;
}

//普通的横向模糊
PS_OUTPUT PSBlur(PS_INPUT input) : SV_TARGET
{
	PS_OUTPUT output = (PS_OUTPUT)0;
	for(int i = 0 ; i < g_cKernelSize; i++)
	{
		output.color += texColor.Sample( samplerColor, input.texCoord.xy + TexelKernel[i].xy ) * BlurWeights[i];
	}
	return output;
}

//模糊处理横向比普通的处理增加了亮度
PS_OUTPUT PSBloomBlur(PS_INPUT input) : SV_TARGET
{
	PS_OUTPUT output = (PS_OUTPUT)0;
	for(int i = 0 ; i < g_cKernelSize; i++)
	{
		output.color += texColor.Sample( samplerColor, input.texCoord.xy + TexelKernel[i].xy ) * BlurWeights[i];
	}
	output.color *= bloomScale;
	return output;
}

PS_OUTPUT PSBrightPass(PS_INPUT input ) : SV_TARGET
{
	PS_OUTPUT output = (PS_OUTPUT)0; 
	output.color = texColor.Sample( samplerColor, input.texCoord.xy) ;
	output.color *= fMiddleGray / (luminance + 0.001f);
	output.color *= (1.0f + (output.color/(fWhiteCutoff * fWhiteCutoff )));
	output.color -= 5.0f;
	output.color = max(output.color, 0.0f);
	output.color /= (10.0f + output.color);
	return output;
}

cbuffer cbMonochrome
{
	float3 LuminanceConv = { 0.2125f, 0.7154f, 0.0721f };
};

PS_OUTPUT PSMonochrome(PS_INPUT input ) : SV_TARGET
{
	PS_OUTPUT output = (PS_OUTPUT)0; 
	output.color.rgb = dot( texColor.Sample( samplerColor, input.texCoord.xy).rgb, LuminanceConv );
    output.color.a = 1.0;
	return output;
}

PS_OUTPUT PSToneMap(PS_INPUT input ) : SV_TARGET
{
	PS_OUTPUT output = (PS_OUTPUT)0; 
	output.color = texColor.Sample( samplerColor, input.texCoord.xy) ;
	output.color *= fMiddleGray / (luminance + 0.001f);
	output.color *= (1.0f + (output.color/(fWhiteCutoff * fWhiteCutoff )));
	output.color /= (1.0f + output.color);
	return output;
}

//普通叠加
PS_OUTPUT PSNormalCombine(PS_INPUT input) : SV_TARGET
{
	PS_OUTPUT output = (PS_OUTPUT)0;
	output.color = texScene.Sample( samplerScene, input.texCoord.xy);
	output.color += texColor.Sample( samplerColor, input.texCoord.xy);
	return output;
}

//  (Soft Light)
PS_OUTPUT PSSoftLight(PS_INPUT input) : SV_TARGET
{
	PS_OUTPUT output = (PS_OUTPUT)0;
	float4 color1 = texScene.Sample( samplerScene, input.texCoord.xy);
	float4 color2 = texColor.Sample( samplerColor, input.texCoord.xy);
	if( color1.r <= 0.5 )
	{
		output.color.r = color1.r + ( 2*color2.r - 1.0f ) * (color1.r - pow(color1.r, 2.0f));
	}
	else
	{
		output.color.r = color1.r + ( 2*color2.r - 1.0f ) * (pow(color1.r, 0.5f) - color1.r);
	}
	
	if( color1.g <= 0.5 )
	{
		output.color.g = color1.g + ( 2*color2.g - 1.0f ) * (color1.g - pow(color1.g, 2.0f));
	}
	else
	{
		output.color.g = color1.g + ( 2*color2.g - 1.0f ) * (pow(color1.g, 0.5f) - color1.g);
	}
	
	if( color1.b <= 0.5 )
	{
		output.color.b = color1.b + ( 2*color2.b - 1.0f ) * (color1.b - pow(color1.b, 2.0f));
	}
	else
	{
		output.color.b = color1.b + ( 2*color2.b - 1.0f ) * (pow(color1.b, 0.5f) - color1.b);
	}
	
	output.color.a = 1.0f;
	return output;
}

//Screen 滤色
PS_OUTPUT PSScreen(PS_INPUT input) : SV_TARGET
{
	PS_OUTPUT output = (PS_OUTPUT)0;
	float4 color1 = texScene.Sample( samplerScene, input.texCoord.xy);
	float4 color2 = texColor.Sample( samplerColor, input.texCoord.xy);
	output.color.rgb = float3(1.0f, 1.0f, 1.0f) - (float3(1.0f, 1.0f, 1.0f) - color1.rgb) * (float3(1.0f, 1.0f, 1.0f) - color2.rgb);
	output.color.a = 1.0f;
	return output;
}


//颜色加深(Color Burn)
float4 PSColorBurn(PS_INPUT input) : SV_TARGET
{

	float4 color;
	float4 color1 = texScene.Sample( samplerScene, input.texCoord.xy);
	float4 color2 = texColor.Sample( samplerColor, input.texCoord.xy);
	color.rgb = float3(1.0f, 1.0f, 1.0f) - (float3(1.0f, 1.0f, 1.0f) - color1.rgb) / color2.rgb;
	color.a = 1.0f;
	return color;
}

cbuffer cbFilter
{
	float2 TexCoordsDownFilter[16];
};

PS_OUTPUT PSDownFilter4(PS_INPUT input ) : SV_TARGET
{
	PS_OUTPUT output = (PS_OUTPUT)0; 
	for(int i = 0 ; i < 16 ; i++)
	{
		output.color += texColor.Sample( samplerColor, input.texCoord.xy + TexCoordsDownFilter[i].xy) ;
	}
	output.color /= 16; 
	return output;
}

PS_OUTPUT PSUpFilter4(PS_INPUT input ) : SV_TARGET
{
	PS_OUTPUT output = (PS_OUTPUT)0; 
	output.color = texColor.Sample( samplerColor, input.texCoord.xy);
	return output;
}
