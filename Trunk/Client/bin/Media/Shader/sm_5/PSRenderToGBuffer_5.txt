struct PS_OUTPUT
{
    float4 Depth : SV_TARGET0;
    float4 Normals : SV_TARGET1;
};

Texture2D texMesh;
SamplerState sampMesh;  //meshµÄÎÆÀí

cbuffer cbRenderToGBuffer
{
    float shininess;
    float farPlane;
};

struct PS_INPUT
{
    float4 Position   : SV_POSITION; 
    float  DepthInView  : TEXCOORD0; 
    float4 normal     : TEXCOORD1; 
    float2 texCoords : TEXCOORD2;
};

PS_OUTPUT PSMain(PS_INPUT input)
{
    float4 texColor = texMesh.Sample(sampMesh, input.texCoords);
    clip(texColor.a - 0.5);
    PS_OUTPUT output = (PS_OUTPUT)0;       
    output.Depth = float4(-input.DepthInView / farPlane, 1.0f, 1.0f, 1.0f);//input.Depth.x;     
    output.Normals.rgb = 0.5f * (normalize(input.normal.xyz) + 1.0f);       
    // Set alpha for both Depth and Normals to 1 (for some reason its required)     
    //output.Depth.a = 1.0f;     
    output.Normals.a = shininess / 255;
    return output; 
}