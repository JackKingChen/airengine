
sampler2D srcColor;
sampler2D sceneColor;

struct PS_INPUT
{
    float4 color        : COLOR;
    float2 tex0:TEXCOORD0;
};

struct PS_OUTPUT
{
	float4 color:COLOR;
};

//普通叠加
PS_OUTPUT PSNormalCombine(PS_INPUT input)
{
	PS_OUTPUT output = (PS_OUTPUT)0;
	output.color = tex2D(srcColor, input.tex0.xy);
	output.color += tex2D(sceneColor, input.tex0.xy);
	return output;
}

//  (Soft Light)
PS_OUTPUT PSSoftLight(PS_INPUT input)
{
	PS_OUTPUT output = (PS_OUTPUT)0;
	float4 color1 = tex2D(sceneColor, input.tex0.xy);
	float4 color2 = tex2D(srcColor, input.tex0.xy);
	if( color1.r <= 0.5 )
	{
		output.color.r = color1.r + ( 2*color2.r - 1.0f ) * (color1.r - pow(color1.r, 2.0f));
	}
	else
	{
		output.color.r = color1.r + ( 2*color2.r - 1.0f ) * (pow(color1.r, 0.5f) - color1.r);
	}
	
	if( color1.g <= 0.5 )
	{
		output.color.g = color1.g + ( 2*color2.g - 1.0f ) * (color1.g - pow(color1.g, 2.0f));
	}
	else
	{
		output.color.g = color1.g + ( 2*color2.g - 1.0f ) * (pow(color1.g, 0.5f) - color1.g);
	}
	
	if( color1.b <= 0.5 )
	{
		output.color.b = color1.b + ( 2*color2.b - 1.0f ) * (color1.b - pow(color1.b, 2.0f));
	}
	else
	{
		output.color.b = color1.b + ( 2*color2.b - 1.0f ) * (pow(color1.b, 0.5f) - color1.b);
	}
	
	output.color.a = 1.0f;
	return output;
}

//Screen 滤色
PS_OUTPUT PSScreen(PS_INPUT input)
{
	PS_OUTPUT output = (PS_OUTPUT)0;
	float4 color1 = tex2D(sceneColor, input.tex0.xy);
	float4 color2 = tex2D(srcColor, input.tex0.xy);
	output.color.rgb = float3(1.0f, 1.0f, 1.0f) - (float3(1.0f, 1.0f, 1.0f) - color1.rgb) * (float3(1.0f, 1.0f, 1.0f) - color2.rgb);
	output.color.a = 1.0f;
	return output;
}


//颜色加深(Color Burn)
PS_OUTPUT PSColorBurn(PS_INPUT input)
{
	PS_OUTPUT output = (PS_OUTPUT)0;
	float4 color1 = tex2D(sceneColor, input.tex0.xy);
	float4 color2 = tex2D(srcColor, input.tex0.xy);
	output.color.rgb = float3(1.0f, 1.0f, 1.0f) - (float3(1.0f, 1.0f, 1.0f) - color1.rgb) / color2.rgb;
	output.color.a = 1.0f;
	//output.color.rg = float2(1.0, 0);//input.tex0.xy;
        //output.color.b = 1.0;
	return output;

    //float4 output = tex2D(srcColor, input.tex0) * input.color;
    //return output;
}